/*
<metadata description="BLOCKSmodular" details="" target="Lightpad" tags="MIDI;Controller;">
<modes>
<mode name="Default">
  <variable name="AudioColor1" value="0xFFFF0000"/>
  <variable name="AudioColor2" value="0xFFFFA000"/>
  <variable name="AudioColor3" value="0xFFE6F000"/>
  <variable name="AudioColor4" value="0xFF80FF55"/>
  <variable name="CVColor1" value="0xFF1500FF"/>
  <variable name="CVColor2" value="0xFF03ABFF"/>
  <variable name="CVColor3" value="0xFF00FF6C"/>
  <variable name="CVColor4" value="0xFFB13FE8"/>
</mode>

</modes>
    <groups>
      <group name="colours" displayName="Colours" />
    </groups>

    <variables>
    <variable name="AudioColor1"  displayName="Audio 1 Colour" group="colours" type="colour" value="0xFFFF0000"/>
    <variable name="AudioColor2"  displayName="Audio 2 Colour" group="colours" type="colour" value="0xFFFFA000"/>
    <variable name="AudioColor3"  displayName="Audio 3 Colour" group="colours" type="colour" value="0xFFE6F000"/>
    <variable name="AudioColor4"  displayName="Audio 4 Colour" group="colours" type="colour" value="0xFF80FF55"/>
    <variable name="CVColor1"  displayName="CV 1 Colour" group="colours" type="colour" value="0xFF1500FF"/>
    <variable name="CVColor2"  displayName="CV 2 Colour" group="colours" type="colour" value="0xFF03ABFF"/>
    <variable name="CVColor3"  displayName="CV 3 Colour" group="colours" type="colour" value="0xFF00FF6C"/>
    <variable name="CVColor4"  displayName="CV 4 Colour" group="colours" type="colour" value="0xFFB13FE8"/>
    </variables>
</metadata>
*/

//==============================================================================
bool isCVPage;
int audioMode;
int cvMode;

void initialise()
{
    audioMode = 0;
    cvMode = 0;
    isCVPage = false;
	for (int i = 0; i < 8; ++i) {
        setHeapInt(i * 4, 0);
    }
	for (int i = 0; i < 32; ++i) {
        setLocalConfigActiveState (i, false, false);
	}
}

//==============================================================================
//Graphics
void repaint()
{   
    clearDisplay();
    drawNumber(int(isCVPage),0xFFFFFFFF, 0, 0);
    drawNumber(audioMode, 0xFFFF0000, 0, 5);
    drawNumber(cvMode, 0xFF0000FF, 0, 10);
    fadePressureMap();
    drawPressureMap();
}

int getColor(bool cvpage, int index)
{
    if(!cvpage)//Audio
    {
        if(index == 1) return AudioColor1;
        if(index == 2) return AudioColor2;
        if(index == 3) return AudioColor3;
        if(index == 4) return AudioColor4;
    }
    else//CV
    {
        if(index == 1) return CVColor1;
        if(index == 2) return CVColor2;
        if(index == 3) return CVColor3;
        if(index == 4) return CVColor4;
    } 
    return 0xFFFFFFFF
}

//==============================================================================
//Touch event
void touchStart (int touchIndex, float x, float y, float z, float vz)
{
    addPressurePoint (getColor(isCVPage, touchIndex), x, y, z * 60.0);
    sendCoordinateCC(touchIndex, true, x, y, z);
}

void touchMove (int touchIndex, float x, float y, float z, float vz)
{
    addPressurePoint (getColor(isCVPage, touchIndex), x, y, z * 30.0);
    sendCoordinateCC(touchIndex, true, x, y, z);
}

void touchEnd (int touchIndex, float x, float y, float z, float vz)
{
    addPressurePoint (getColor(isCVPage, touchIndex), x, y, z * 1.0);
    sendCoordinateCC(touchIndex, false, x, y, z);
}
 

//==============================================================================
//MIDI
void handleMIDI (int byte0, int byte1, int byte2)
{
    /*
    MIDIchannel: byte0 - 175
    CCnumber: byte1
    CCvalue: byte2
    */
    
    if(byte0 == 191) { //MIDIchannel:16のCC送信
        //General
        if(byte1 == 8) {//CCnumber:8
            if(byte2 == 127) isCVPage = true;
            if(byte2 == 0) isCVPage = false;
        }
        
        //Audio
        if(byte1 == 1) {
            if(byte2 == 0) audioMode = 0;//OFF
            if(1 <= byte2 && byte2 <= 32) audioMode = 1;//Granular
            if(33 <= byte2 && byte2 <= 64) audioMode = 2;//Sample playback
            if(65 <= byte2 && byte2 <= 96) audioMode = 3;//Karplus strong
            if(97 <= byte2 && byte2 <= 127) audioMode = 4;//Logistic map
        }
        
        //CV
        if(byte1 == 2) {
            if(byte2 == 0) cvMode = 0;//OFF
            if(1 <= byte2 && byte2 <= 32) cvMode = 1;
            if(33 <= byte2 && byte2 <= 64) cvMode = 2;
            if(65 <= byte2 && byte2 <= 96) cvMode = 3;
            if(97 <= byte2 && byte2 <= 127) cvMode = 4;
        }
    }
}

void sendCoordinateCC(int index, bool isNoteOn, float x, float y, float z)
{
    /*
    x:1,2
    y:3,4
    z:5,6
    */
    
    int midiChannel = index - 1;
    
    if(isNoteOn) {
        int scaledX = int(map(x, 0.07, 1.93, 0.0, 16383.0));
        int upperX = (scaledX >> 7) & 127;
        int lowerX = scaledX & 127;
        int scaledY = int(map(y, 0.07, 1.93, 16383.0, 0.0));
        int upperY = (scaledY >> 7) & 127;
        int lowerY = scaledY & 127;
        int scaledZ = int(map(z, 0.0, 1.0, 0.0, 16383.0));
        int upperZ = (scaledZ >> 7) & 127;
        int lowerZ = scaledZ & 127;
        sendCC (midiChannel, 1, upperX);
        sendCC (midiChannel, 2, lowerX);
        sendCC (midiChannel, 3, upperY);
        sendCC (midiChannel, 4, lowerY);
        sendCC (midiChannel, 5, upperZ);
        sendCC (midiChannel, 6, lowerZ);
    }
    else {
        sendCC (midiChannel, 1, 0);
        sendCC (midiChannel, 2, 0);
        sendCC (midiChannel, 3, 0);
        sendCC (midiChannel, 4, 0);
        sendCC (midiChannel, 5, 0);
        sendCC (midiChannel, 6, 0);
    }
}