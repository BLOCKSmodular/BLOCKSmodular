/*
<metadata description="BLOCKSmodular" details="" target="Lightpad" tags="MIDI;Controller;">
<modes>
<mode name="Default">
  <variable name="AudioColor1" value="0xFFC6F5F5"/>
  <variable name="AudioColor2" value="0xFFC6F5F5"/>
  <variable name="AudioColor3" value="0xFFC6FFFF"/>
  <variable name="AudioColor4" value="0xFFC6F5F5"/>
  <variable name="CVColor1" value="0xFFC6F5F5"/>
  <variable name="CVColor2" value="0xFFC6F5F5"/>
  <variable name="CVColor3" value="0xFFC6FFFF"/>
  <variable name="CVColor4" value="0xFFC6F5F5"/>
</mode>

</modes>
    <groups>
      <group name="colours" displayName="Colours" />
    </groups>

    <variables>
    <variable name="AudioColor1"  displayName="Audio 1 Colour" group="colours" type="colour" value="0xFFC6F5F5" />
    <variable name="AudioColor2"  displayName="Audio 2 Colour" group="colours" type="colour" value="0xFFC6F5F5" />
    <variable name="AudioColor3"  displayName="Audio 3 Colour" group="colours" type="colour" value="0xFFC6FFFF" />
    <variable name="AudioColor4"  displayName="Audio 4 Colour" group="colours" type="colour" value="0xFFC6F5F5" />
    <variable name="CVColor1"  displayName="CV 1 Colour" group="colours" type="colour" value="0xFFC6F5F5" />
    <variable name="CVColor2"  displayName="CV 2 Colour" group="colours" type="colour" value="0xFFC6F5F5" />
    <variable name="CVColor3"  displayName="CV 3 Colour" group="colours" type="colour" value="0xFFC6FFFF" />
    <variable name="CVColor4"  displayName="CV 4 Colour" group="colours" type="colour" value="0xFFC6F5F5" />
    </variables>
</metadata>
*/

#heapsize: 8
/*
heap description
(int)0~3: Recorded(0/1)
(int)4~7: Playing(0/1)
Littlefoot does not has setHeapBits(). So I use setHeapByte()
*/

bool isCVPage;
int audioMode;
int cvMode;

//==============================================================================
void sendXYZCC(float x, float y, float z)
{
    /*
       x:12
       y:13
       z:14
    */
    int scaledX = int(map(x, 0.07, 1.93, 0.0, 16383.0));
    int upperXvalue = (scaledX >> 7) & 127;
    int lowerXvalue = scaledX & 127;
    int scaledY = int(map(y, 1.93, 0.07, 0.0, 16383.0));
    int upperYvalue = (scaledY >> 7) & 127;
    int lowerYvalue = scaledY & 127;
    int scaledZ = int(map(z, 0.0, 1.0, 0.0, 16383.0));
    int upperZvalue = (scaledZ >> 7) & 127;
    int lowerZvalue = scaledZ & 127;
    sendCC (channel, 12, upperXvalue);
    sendCC (channel, 13, lowerXvalue);
    sendCC (channel, 14, upperYvalue);
    sendCC (channel, 15, lowerYvalue);
    sendCC (channel, 16, upperZvalue);
    sendCC (channel, 17, lowerZvalue);
}

int getMicrotonalIndexColour(int index)
{
    int colour = 0xFFFFFFFF;
    if(index == 1)
    {
        colour = 0xFFFF0000;
    }
    if(index == 2)
    {
        colour = 0xFF00FF00;
        
    }
    if(index == 3)
    {
        colour = 0xFF0000FF;
    }
    if(index == 4)
    {
        colour = 0xFFFFFFFF;
    }
    
    return colour;
}

void sendCoordinateCC(int index, bool isNoteOn, float x, float y, float z)
{
    /*
    x:1,2
    y:3,4
    z:5,6
    */
    
    if(isNoteOn) {
        int scaledX = int(map(x, 0.07, 1.93, 0.0, 16383.0));
        int upperX = (scaledX >> 7) & 127;
        int lowerX = scaledX & 127;
        int scaledY = int(map(y, 0.07, 1.93, 16383.0, 0.0));
        int upperY = (scaledY >> 7) & 127;
        int lowerY = scaledY & 127;
        int scaledZ = int(map(z, 0.0, 1.0, 0.0, 16383.0));
        int upperZ = (scaledZ >> 7) & 127;
        int lowerZ = scaledZ & 127;
        sendCC (index, 1, upperX);
        sendCC (index, 2, lowerX);
        sendCC (index, 3, upperY);
        sendCC (index, 4, lowerY);
        sendCC (index, 5, upperZ);
        sendCC (index, 6, lowerZ);
    }
    else {
        sendCC (index, 1, 0);
        sendCC (index, 2, 0);
        sendCC (index, 3, 0);
        sendCC (index, 4, 0);
        sendCC (index, 5, 0);
        sendCC (index, 6, 0);
    }
}

int getColour(int index)
{
    if (index == 0)  return 0xFFFFFFFF;
    if (index == 1)  return 0xFFFF0000;
    if (index == 2)  return 0xFF00FF00;
    if (index == 3)  return 0xFF0000FF;
    if (index == 4)  return 0xFFFFFF00;
    return 0xFFFFFFFF;
}

//==============================================================================
int getPadIndex (float x, float y)
{
    /*
    0: top left
    1: bottom left
    2: top right
    3: bottom right
    */
    int row = int (y * (0.95 / 2.0) * float (gridSize));
    int col = int (x * (0.95 / 2.0) * float (gridSize));

	return (gridSize * col) + row;
}

//==============================================================================
void drawPads()
{
    for (int padIndex = 0; padIndex < gridSize * gridSize; ++padIndex)
    {
        int overlayColour = isRecorded(padIndex) ? 0x00FFFFFF : 0xDE000000;
        int x = padIndex / 2 * padWidth;
        int y = padIndex % 2 * padWidth;
        int w = padWidth - padSpacing;
        blendRect(blendARGB(getColour(padIndex), overlayColour), x, y, w, w);
    }
}

void initialise()
{
	padWidth = 15 / gridSize;
	padSpacing = gridSize > 1 ? (15 - gridSize * padWidth) / (gridSize - 1) : 0;
	padWidth += padSpacing;
	
	for (int i = 0; i < 8; ++i) {
        setHeapInt(i * 4, 0);
    }

	for (int i = 0; i < 32; ++i) {
        setLocalConfigActiveState (i, false, false);
	}
}

//==============================================================================
void repaint()
{   
    clearDisplay();
    fadePressureMap();
    drawPressureMap();
}

//==============================================================================
void touchStart (int touchIndex, float x, float y, float z, float vz)
{
    drawNumber(touchIndex,0xFFFFFFFF, 0, 0);
    addPressurePoint (getColour(touchIndex), x, y, z * 60.0);
    sendCoordinateCC(touchIndex, true, x, y, z);
}

void touchMove (int touchIndex, float x, float y, float z, float vz)
{
    drawNumber(touchIndex,0xFFFFFFFF, 0, 0);
    addPressurePoint (getColour(touchIndex), x, y, z * 30.0);
    sendCoordinateCC(touchIndex, true, x, y, z);
}

void touchEnd (int touchIndex, float x, float y, float z, float vz)
{
    drawNumber(touchIndex,0xFFFFFFFF, 0, 0);
    addPressurePoint (getColour(touchIndex), x, y, z * 20.0);
    sendCoordinateCC(touchIndex, false, x, y, z);
}

void handleMIDI	(int byte0, int byte1, int byte2)
{
    /*
    MIDIchannel: byte0 - 175
    CCnumber: byte1
    CCvalue: byte2
    */
    int channel = byte0 - 175;
}