/*
<metadata description="BLOCKSmodular" details="" target="Lightpad" tags="MIDI;Controller;">
<modes>

</modes>
    <groups>
      <group name="colours" displayName="Colours" />
    </groups>

    <variables>
    <variable name="Color1"  displayName="Audio 1 Colour" group="colours" type="colour" value="0xFFFF0000"/>
    <variable name="Color2"  displayName="Audio 2 Colour" group="colours" type="colour" value="0xFF00FF00"/>
    <variable name="Color3"  displayName="Audio 3 Colour" group="colours" type="colour" value="0xFF0000FF"/>
    <variable name="Color4"  displayName="Audio 4 Colour" group="colours" type="colour" value="0xFFFFFFFF"/>
    </variables>
</metadata>
*/

//==============================================================================
int mode;
/*
Mode list
0: Microtone
1: Euclid
2: Chaotic noise
3: Physical drum
4: Granular
*/

void initialise() {
    mode = 0;
	for (int i = 0; i < 32; ++i) {
        setLocalConfigActiveState (i, false, false);
	}
}

//==============================================================================
//Graphics
void repaint() {
    clearDisplay();
    drawNumber(mode,0xFFFFFFFF, 0, 0);
    fadePressureMap();
    drawPressureMap();
}

int getColor(int index) {
    if(index == 1) return Color1;
    if(index == 2) return Color2;
    if(index == 3) return Color3;
    if(index == 4) return Color4;
    return 0xFFFFFFFF
}

//==============================================================================
//Touch event
void touchStart (int touchIndex, float x, float y, float z, float vz) {
    int midiChannel = touchIndex - 1;
    if(mode == 0) sendMicrotoneCC(midiChannel, true, x, y, z);
    if(mode == 1) sendEuclidCC(midiChannel, true, x, y, z);
    if(mode == 2) sendChaoticNoiseCC(midiChannel, true, x, y, z);
    if(mode == 3) sendPhysicalDrumCC(midiChannel, true, x, y, z);
    if(mode == 4) sendGranularCC(midiChannel, true, x, y, z);
    addPressurePoint (getColor(touchIndex), x, y, z * 60.0);
}

void touchMove (int touchIndex, float x, float y, float z, float vz) {
    int midiChannel = touchIndex - 1;
    if(mode == 0) sendMicrotoneCC(midiChannel, true, x, y, z);
    if(mode == 1) sendEuclidCC(midiChannel, true, x, y, z);
    if(mode == 2) sendChaoticNoiseCC(midiChannel, true, x, y, z);
    if(mode == 3) sendPhysicalDrumCC(midiChannel, false, x, y, z);
    if(mode == 4) sendGranularCC(midiChannel, true, x, y, z);
    addPressurePoint (getColor(touchIndex), x, y, z * 30.0);
}

void touchEnd (int touchIndex, float x, float y, float z, float vz) {
    int midiChannel = touchIndex - 1;
    if(mode == 0) sendMicrotoneCC(midiChannel, false, x, y, z);
    if(mode == 1) sendEuclidCC(midiChannel, false, x, y, z);
    if(mode == 2) sendChaoticNoiseCC(midiChannel, false, x, y, z);
    if(mode == 3) sendPhysicalDrumCC(midiChannel, false, x, y, z);
    if(mode == 4) sendGranularCC(midiChannel, false, x, y, z);
    addPressurePoint (getColor(touchIndex), x, y, z * 1.0);
}
 

//==============================================================================
//MIDI
void handleMIDI (int byte0, int byte1, int byte2) {
    /*
    MIDIchannel: byte0 - 175
    CCnumber: byte1
    CCvalue: byte2
    */
    
    if(byte0 == 191) { //MIDIchannel:16のCC
        if(byte1 == 1) {
            mode = byte2;
        }
    }

    //TODO
    //Euclid Trigger receive
}


void sendMicrotoneCC(int midiChannel, bool isTouching, float x, float y, float z) {
    /*
    CV Odd: Distance from center - CC1,2
    CV Even: Z - CC3,4
    */
    if (isTouching) {
        int distance = int(map(abs(1.0 - x) + abs(1.0 - y), 0.0, 2.0, 0.0, 16383.0));
        int upperDistValue = (distance >> 7) & 127;
        int lowerDistValue = distance & 127;
        sendCC(midiChannel, 1, upperDistValue);
        sendCC(midiChannel, 2, lowerDistValue);   
        int pressure = int(map(z, 0.0, 1.0, 0.0, 16383.0));
        int upperPressureValue = (pressure >> 7) & 127;
        int lowerPressureValue = pressure & 127;
        sendCC(midiChannel, 3, upperPressureValue);
        sendCC(midiChannel, 4, lowerPressureValue);
    }
    else {
        sendCC(midiChannel, 1, 0);
        sendCC(midiChannel, 2, 0);
        sendCC(midiChannel, 3, 0);
        sendCC(midiChannel, 4, 0);
    }
}

void sendEuclidCC(int midiChannel, bool isTouching, float x, float y, float z) {
    /*
    Steps: X - CC1
    Amounts of beats: Y - CC2
    Tempo: pressure - CC3,4
    */
    if (isTouching) {
        int distance = int(map(abs(1.0 - x) + abs(1.0 - y), 0.0, 2.0, 0.0, 16383.0));
        int upperDistValue = (distance >> 7) & 127;
        int lowerDistValue = distance & 127;
        sendCC(midiChannel, 1, upperDistValue);
        sendCC(midiChannel, 2, lowerDistValue);   
        int pressure = int(map(z, 0.0, 1.0, 0.0, 16383.0));
        int upperPressureValue = (pressure >> 7) & 127;
        int lowerPressureValue = pressure & 127;
        sendCC(midiChannel, 3, upperPressureValue);
        sendCC(midiChannel, 4, lowerPressureValue);
    }
    else {
        sendCC(midiChannel, 1, 0);
        sendCC(midiChannel, 2, 0);
        sendCC(midiChannel, 3, 0);
        sendCC(midiChannel, 4, 0);
    }
}

void sendChaoticNoiseCC(int midiChannel, bool isTouching, float x, float y, float z) {
    /*
    Chaotic parameter: distance from center - CC1,2
    Amp: pressure - CC3,4
    */

    if (isTouching) {
        int distance = int(map(abs(1.0 - x) + abs(1.0 - y), 0.0, 2.0, 0.0, 16383.0));
        int upperDistValue = (distance >> 7) & 127;
        int lowerDistValue = distance & 127;
        sendCC(midiChannel, 1, upperDistValue);
        sendCC(midiChannel, 2, lowerDistValue);   
        int pressure = int(map(z, 0.0, 1.0, 0.0, 16383.0));
        int upperPressureValue = (pressure >> 7) & 127;
        int lowerPressureValue = pressure & 127;
        sendCC(midiChannel, 3, upperPressureValue);
        sendCC(midiChannel, 4, lowerPressureValue);
    }
    else {
        sendCC(midiChannel, 1, 0);
        sendCC(midiChannel, 2, 0);
        sendCC(midiChannel, 3, 0);
        sendCC(midiChannel, 4, 0);
    }
}

void sendPhysicalDrumCC(int midiChannel, bool isTouchStart, float x, float y, float z) {
    /*
    Pitch: distance from center - CC1,2
    Decay: pressure -- CC3,4
    Trigger: touch start -- CC5
    */

    int distance = int(map(abs(1.0 - x) + abs(1.0 - y), 0.0, 2.0, 0.0, 16383.0));
    int upperDistValue = (distance >> 7) & 127;
    int lowerDistValue = distance & 127;
    sendCC(midiChannel, 1, upperDistValue);
    sendCC(midiChannel, 2, lowerDistValue);   
    int pressure = int(map(z, 0.0, 1.0, 0.0, 16383.0));
    int upperPressureValue = (pressure >> 7) & 127;
    int lowerPressureValue = pressure & 127;
    sendCC(midiChannel, 3, upperPressureValue);
    sendCC(midiChannel, 4, lowerPressureValue);
    
    if (isTouchStart) {
        sendCC(midiChannel, 5, 127);
    }
    else {
        sendCC(midiChannel, 5, 0);
    }
}

void sendGranularCC(int midiChannel, bool isTouching, float x, float y, float z){
    /*
    Sample position: X - CC1,2
    Grain size: Y - CC3,4
    Loudness: pressure - CC5,6
    */
    
    if(isTouching) {
        int scaledX = int(map(x, 0.07, 1.93, 0.0, 16383.0));
        int upperX = (scaledX >> 7) & 127;
        int lowerX = scaledX & 127;
        int scaledY = int(map(y, 0.07, 1.93, 16383.0, 0.0));
        int upperY = (scaledY >> 7) & 127;
        int lowerY = scaledY & 127;
        int scaledZ = int(map(z, 0.0, 1.0, 0.0, 16383.0));
        int upperZ = (scaledZ >> 7) & 127;
        int lowerZ = scaledZ & 127;
        sendCC (midiChannel, 1, upperX);
        sendCC (midiChannel, 2, lowerX);
        sendCC (midiChannel, 3, upperY);
        sendCC (midiChannel, 4, lowerY);
        sendCC (midiChannel, 5, upperZ);
        sendCC (midiChannel, 6, lowerZ);
    }
    else {
        sendCC (midiChannel, 1, 0);
        sendCC (midiChannel, 2, 0);
        sendCC (midiChannel, 3, 0);
        sendCC (midiChannel, 4, 0);
        sendCC (midiChannel, 5, 0);
        sendCC (midiChannel, 6, 0);
    }
}